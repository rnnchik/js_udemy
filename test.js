// 1
// alert("Hello world");     модалка в браузере

// 2
// let answer = confirm("Are you here?"); модалка с 2 вариантпми ответа
// console.log(answer); получаем булевое значение;

// 3
// let answer = prompt("Есть ли Вам 18?", "Да"); модалка с полем ввода для ответа
// console.log(answer); получаем введенные данные в виде строки


// let num = 50;

// if (num <49) {
//     console.log("Неверно!");
// } else if (num > 100){
//     console.log('Много!');
// } else {
//     console.log('Верно');
// }

// switch (num) {
//     case num < 49:
//         console.log("Неверно!");
//         break;
//     case num > 100:
//         console.log("Много!");
//         break;
//     case num > 80:
//         console.log("Все еще много!");
//         break;
//     case 50:
//         console.log("Верно!");
//         break;
//     default:
//         console.log("Что то не так!");
//         break;
// }
// циклы
// do {
//     console.log(num);
//     num++;
// } while (num < 55);



// for (let i =1; i < 8; i++) {
//     if (i == 5) {
//         continue; //пропустить шаг цикла
//     }
//     console.log(i);
// }


// Функции
// function showRirstMessage (text) {  // фанкшин дэкорешен функция в потоке кода (создаются до начала кода, можно использовать до их объявления)
//     console.log(text);
// }

// showRirstMessage('Вася');

// let calc = function(a, b) { // фанкшин экспрешен функция создаётся только когда до нее доходит код
//     return (a + b); 
// }

// друнрй формат записи функции
// let summ = (a,b) => a + b ;
// console.log(summ(5,6));

// массивы


// let options = {
//     width: 1024,
//     height: 2014,
//     name: "test"
// };

// options.bool = false;
// options.colors ={
//         border: "black",
//         bg: "red"
// };

// удалять элемент из массива
// delete options.bool;  

// for (let key in options) {
//         console.log("Свойство " + key + " имеет значение " + options[key]);
// }

// console.log(Object.keys(options).length);




// массивы

// let arr = [1, "two", 3, "four", 5];

// arr.pop(); //удаление последнего элемента
// arr.push("5"); // добавить элетент в канец массива
// arr.shift(); //удаление первого элемента
// arr.unshift("1");  // добавить элетент в нчало массива

// for (let i = 0; i < arr.length; i++) {
//         console.log(arr[i]);
// }

// arr.forEach(function(item, i, mass) {
//         console.log(i + ": " + item + " (массив: " + mass + ")");
// });

// let mass = [1, "two", 3, "four", 5, 6];

// выводит ключи массива
// for (let key in mass) {
//         console.log(key);
// }

// выводит значения массива
// for (let key of mass) {
//         console.log(key);
// }



// /******************************************* */

// let ans = prompt("", ""),
//     arrMass = [];

// arrMass = ans.split(",");
// console.log(arrMass);


// let arr = [1,15,4],
// i = arr.sort(compareNum);

// function compareNum(a,b) {
//         return a-b;
// }

// console.log(arr);


// let x = 5;
// console.log( x++ );  5

// console.log([ ] + false - null + true);  Nan

// let y = 1; 
// let x = y = 2; 
// console.log(x);   2



// console.log( typeof([ ] + 1 + 2) );
// let a,
//     b;
// console.log( typeof( a && b ));
// console.log( typeof( !!( a && b ) ));

// console.log(2 && 1 && null && 0 && undefined);

// Какое будет выведено значение: let x = 5; alert( x++ ); ?

// Выведет 5. Это задача на разницу между постфиксной и префиксной формой инкремента/ декремента.

// Чему равно такое выражение: [ ] + false - null + true ?

// NaN - Not a number.

// Пустой массив преобразуется в пустую строку.

// Далее идет сложение пустой строки и false - получается "false"

// Когда мы пытаемся от строки отнять что-то - выполняется математически неверная операция и мы получаем NaN

// Это задача на динамическую типизацию в JS (по простому - преобразование типов данных один в другой)

// Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?

// Выведет 2.

// В этой части y = 2 мы присваиваем переменной y значение 2, а затем это же значение идет в переменную  x

// Чему равна сумма [ ] + 1 + 2?

// Выведет "12"

// Пустой массив превращается в пустую строку, а дальше при сложении числа со строкой - все преобразуется в тип данных строка.

// Что выведет этот код: alert( "1"[0] )?

// Выведет 1, так как это первый символ в этой строке.

// Чему равно 2 && 1 && null && 0 && undefined ?

// Выведет null, так как оператор И возвращает первое ложное значение.

// В логическом контексте в JS только 5 сущностей представляют собой неправду (false) - это 0, пустая строка "" , null , undefined , NaN

// Есть ли разница между выражениями? !!( a && b ) и (a && b)?

// Есть. !!  превращает любую конструкцию в Boolean тип данных

// Что выведет этот код: alert( null || 2 && 3 || 4 ); ?

// Выведет 3. Почему так? Мы разбиваем этот кусочек кода на 3 части.

// Сначала, в операции ИЛИ - из двух частей вернет 2. ИЛИ возвращает всегда первое правдивое утверждение.

// После оператор И сравнит 2 и 3 и вернет последнее - 3ку. Оператор И возвращает первое ложное значение, но если его нет - то последнее.

// И в конце ИЛИ возвращает первое правдивое утверждение.



// a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?

// Нет. Это разные массивы, просто с одинаковыми значениями.

// Что выведет этот код: alert( +"Infinity" ); ?

// Вернет Infinity. Оператор + перед строкой превратит её в число.

// Верно ли сравнение: "Ёжик" > "яблоко"?

// Нет, так как в соответствии с unicode кодировкой ё стоит после я.

// Чему равно 0 || "" || 2 || undefined || true || falsе ?

// Вернет 2, так как это первое правдивое значение (true)